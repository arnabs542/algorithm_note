2. Linked list

常见错误

Key points:
1. When you want to de-reference a ListNode, make sure it is not a NULL pointer.
de-referene :
	ListNode*p = new ListNode(10);    C++
	ListNode p = new.....        Java

dereference
	...p->value       C++, PHP?
        p.value           Java, Python?.... 

2.Never ever lost the control of the head pointer of the LinkedList
E1 <- E2       E3->E4->.....  En-> NULL	

常见考题：
No.1 interview question on linkedlist: how to reverse a linklist

	Node1 -> Node2 -> Node3 ->.... Noden -> NULL
         head
   prev <- cur  .next     首先保存cur.next，随后将cur.next指向prev，
          prev     cur    .next                            接下来向后移动 prev cur

reversed: NULL <- Node1 <- Node2 <-.... <- Noden

Solution1: iteration
01:41:45


Solution2: recursion
***
再次强调recursion关键：三个层次
1.表象上：自己调用自己
2.将大的问题转化为小一号的问题
3.写code：最小问题是什么
	  连接这些问题的数学表达式是什么?
***

base case就是将最终结果与之后的998个子问题连接起来

除了subproblem之外有几处不同？
1）NextNode.next = curr;//subproblem head 指向current node
2）Curr.next = null;//current node's next is set to null

DEMO 01:51:35 ~ 02:01:10

iteration 从左到右反转
recursion 从右到左反转

Q1.How to find the middlr node of a linked list
快慢指针

N1 -> N2 -> N3 -> N4 -> N5 -> N6 -> NULL
选N3好
为什么（node为偶数个时，中点取前面的那个）
因为N3 更方便maintaince，如果要N4 的话可以很快的移动到N4，而N3要从头遍历
相关问题：
tail 指针的意义，为了更方便在linked list 末尾添加新的node

Q2： 用快慢指针判断一个linked list是否有环
判断快慢指针是否相等
follow up:
how to find the start node of the loop 

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
                                          25    21
                                          24 23 22

because the fast pointer always move double distance of the slow pointer
so: (?)

step1: find the node that fast and slow pointers meet
step2: move the fast pointer back to the start point, and run again, when they meet again, then this point is the loop start point.

Q3：insert a node in a sorted linked list (simple)
*** linked list 最难点，头尾边界问题***
所以每次写的条件要先自己试一试头尾的情况

Corver case: insert 0
Be careful about two corner cases: head and tail

Q4: How to merge two sorted linked list into one long sorted linked list?
using dummy node.
So why use dummy node? When need to use dummy node?
When we want to append new element to an initial empty linked list, we do not have ana intial head node. In this case, we can use a dummy node to act as a head node.

DummyHeadNode(0)->N1->N2->N3......

*** return DummyHeadNode.next***

Q5: 
Convert linked list:
N1->N2->N3->...->Nn-1->Nn->Null
to:
(N1->Nn)-(>N2->Nn-1)->...

Solution:
step1: find the middle node of the linkedlist, and
step2: reverse the 2nd half
step3: merge two linkedlist into one long linkedlist()

Q6: Partition List:
Given a linked list and a target value x, partition it such that all nodes less than x are listed before the nodes larger than or equal to target value x. (keep the original relative order of the nodes in each or the two partitions)
e.g. 
input:1->6->3->2a->5->2a and target x = 4
result: 1->3->2a->2b->6->5

DummyHeadSmall(0)->1->3->2a->2b
			     tailSmall

DummyHeadLarge(0)->6->5
                      tailLarge

*** declare the dummy node and the tail node ***
why use dummy head node? because we want to add new element to the empty linked list
why use tail node? because we want to add new element at the last node of the linked list

tailSmall.next = DummyHeadLarge.next

Solution:
step1: we initialize two dummy head nodes.
step2: merge the two half 
step3: ***** important! remember to clean the last node.next to null *****

***
interview steps!!!
1. make sure the assumptions
2. come up with your high level solutions
3. write code
4. write test case: common, and special (head, tail, null, ......)


Terminology:
1. General concept:Graph
2. singly linkedList: 1:1 on previous node () and 1:1 on next node
3. doubly linkedlist: 1:1 on previous node(you have two pointers), and 1:1 on next node.
4. Tree: one source node, no loop and fully connected.





66b0076052e1b67977bc10e3cef278cc




































