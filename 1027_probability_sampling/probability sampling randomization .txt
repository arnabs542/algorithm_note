class 18 probability sampling randomization

Q.1 shuffling algorithm (OOD)
1.1 spades 黑桃
1.2 hearts 红心
1.3 diamonds 方片
1.4 clubs 梅花

index || 0 1 2 3 4 ... ... 50 51

iteration1: call random(0->51) -> random_number1 = 5 -> call swap(5, 51)
第51张牌: 上任意牌出现概率都是1/52
P(every card showup in position 51) = 1/52

iteration2: call random(0->50) -> random_number2 = 8 -> call swap(8,50)
P(Every card was not selected during previous iteration) = 1 - 1/52
P(every card showup in position 51) = 51/52 * 1/51 = 1/52

iteration3: call random(0->49) -> random_number3 = 7 -> call swap(7, 49)
P(Every card was not selected during previous 1st iteration) = 1 - 1/52
P(Every card was not selected during previous 2nd iteration) = 1 - 1/51
P(every card showup in position 51) = 51/52 * 50/51 * 1/50 = 1/52

Discusstion
What similar problems can you solve?

	- select random k elements in an array of size

Q.2 How to do sampling for an unlimited data flow and 
when reading the n-th element 
we are required to return one random number among all numbers read so far, 
such that the probability of returning any element read so far is 1/n

We only allow use O(1)

Example input is a data flow
index 0 1 2 3 4 5 6 ...... t-1       time point

solution:
int solu = ?

t = 0 call random[0-0] = random_num1, if random_num1 == 0 -> solu=input[0]

t = 1 call random[0-1] = random_num2, if random_num2 == 0 -> solu=input[1]
P(input[0] will be returned as the solu) = 1 - 50% = 50%
P(input[1] will be returned as the solu) = 50 %

t = 2 call random[0-2] = random_num3, if random_num3 == 0 -> solu=input[2]
P(input[2] will be returned as the solu) = 1/3

(P(input[0] be the previous solu) = 50%)
P(input[0] will be returned as the solu) = 50% * (1 - 1/3) = 1/3

(P(input[1] be the previous solu) = 50%)
P(input[1] will be returned as the solu) = 50% * (1 - 1/3) = 1/3

t = 3

int S[...];
int solu = S[1] // unlimited data flow, which might not stay in the memory forever
while (i++) {
	int r = random(0, i); // randomly generate a number from 0 to i (inclusive)
	if (r == 0) {
		solu_so_far = S[i] // the probability of choosing i-th element as the final solution is 1/i
	}
	// return a number 'solu_so_far' if someone asks for it.
}

### reservoir sampling
is a family of randomized algorithm for randomly choosing a sample of k items from a list S containing n items,
where n is either a very large or unknown number. Typically n is large enough
that the list doexn't fit into main memory.

Q2b what if we are asked to return k out of n logs
int S[...]
for (int i = 1; i <= k; i++) {
	int solu_so_far[k] = S[1...k]; // unlimited data flow, which might not stay in the memory forever
}

while (i++) { // current element is the i-th element
	int r = rndom(1, i);
	if (r <= k) {
		solu_so_far[r] = S[i] // the probability of choosing i-th element as the final solution is 1/i
	}
	// return a number 'solu_so_far' if someone asks for it
}

Q2C what if we ask you to return a random largest number's index

For example, given a stream like '1, 2, 5a, 3, 4, 3, 4, 5b', you may return 5a or 5b's index randomly.

int max_so_far = -inf;
int counter_max_number;
int solu;

e.g.
input = 1, 2, 5a, 3, 4, 3, 4, 5b
        t->

int max_so_far = 1;
int counter_max_number = 1;
int solu = 1;  // random(1 -> counter_max_number)

input = 1, 2, 5a, 3, 4, 3, 4, 5b
           t->
int max_so_far = 2;
int counter_max_number = 1;
int solu = 2; // random(1 -> counter_max_number)

input = 1, 2, 5a, 3, 4, 3, 4, 5b
              t->
int max_so_far = 5;
int counter_max_number = 1;
int solu = 5a; // random(1 -> counter_max_number)

input = 1, 2, 5a, 3, 4, 3, 4, 5b
                  t->
int max_so_far = 5;
int counter_max_number = 1;
int solu = 5a; // random(1 -> counter_max_number)

input = 1, 2, 5a, 3, 4, 3, 4, 5b
                     t->
int max_so_far = 5;
int counter_max_number = 1;
int solu = 5a; // random(1 -> counter_max_number)

... 一直到5b之前不用更新

input = 1, 2, 5a, 3, 4, 3, 4, 5b
                              t->
int max_so_far = 5;
int counter_max_number = 2;
int solu = ... ; // random(1 -> counter_max_number)


Q3a. How to design a random number generator random(7), with random(5)

Random(7): [0-6]
Rnadom(5): [0-7]

(1) Look at the reverse direction: Random(7) -> Random(5)

Random7: 0 1 2 3 4 5 6
     P = 1/7 ... 1/7

Random5: 0 1 2 3 4
     P = 1/5 ... 1/5

1/7 100 %

1/7 / 5/7 = 1/5 (normalization process)

(2) Now let's look ar the real problem. 	Random(5) -> Random(7)

Random(5) -> Random(25) 

                   r2
             0 1 2 3 4
         r1  0 1 2 3 4
             0 1 2 3 4		[r1][r2] -> evenly distributed among all numbers in this matrix
             0 1 2 3 4
             0 1 2 3 4

call Random(5) for the 1st time = random_num1 [0-4] = row number
call Random(5) for the 2nd time = random_num2 [0-4] = column number

			there are 25 numbers in this matrix


Random(25) -> Random(7)

            
             0 1 2 3 4
             5 6 0 1 2
             3 4 5 6 0
             1 2 3 4 5
             6 

call Random(5) for the 1st time = random_num1 [0-4] = row number
call Random(5) for the 2nd time = random_num2 [0-4] = column number
generated_number = r1*5 + r2

return the number as the output of Random(7)
if (generated_number = r1*5 + r2)
fall into [0-20], so the final result = generated_number % 7


Q3b. How to design a random number generator Random(1, 1,000,000), with Random(5)

Solution1:
log_5(1,000,000)

换成log 2
binary representation random(2) = [0, 1]

We only need to call random(2) 20 times to solve this problem 

2^10 = 1024 1K
2^20 = 1M
2^30 = 1G
2^40 = 1T
2^50 = 1P
2^60 = 1E



Q4. Given an unlimited data flow, how to keep track of the median of the numbers read so far? O(n) space

	SMALL			LARGE
	50 %			50 %

	max-heap	        min-heap

	assumption: SMALL HEAP 比 LARGE HEAP 最多可以大1
	51			50

Solution1. sort		O(nlogn)
Solution2. a little bit better: insertion sort O(n) for each new element comes in
		input[N] = 1 2 5 6 7 9        new data X = 6
Solution3.
	Case1: if Max-heap.size() > Min-heap.size()
		case1.1 X<Max_heap.top().  we call Max-heap.insert(X) and then
					   Min-heap.insert(Max-heap.pop())
		case1.2 else: Min-heap.insert(X)

	Case2: if Max-heap.size() == Min-heap.size()
		Case2.1 X < Max_heap.top(). we call Max-heap.insert(X)
		Case2.2 else: Min-heap.insert(X), call Max-heap.insert(Min-heap.pop())
			Be careful, we are keep the Max-heap.size() >= Min-heap.size()

	Follow up:
	Delong (what if the number of elements is too large to be stored into the memory)
	
	SMALL			LARGE
	50 %			50 %

	max-heap	        min-heap

	assumption: SMALL HEAP 比 LARGE HEAP 最多可以大1
	50G + 1			50G

e.g. assume that we only have 1G memory
                60      98   101     180
xxxxxx...xxxxxxxx   xxxxx     yyyyy  yyyyyyyy...yyyyyyyyy
store on disk    || store in memory ||  store on disk

When we need to store again the left max-heap?
When we found that Max-ehap.top() < 60, then we know we must re-sort all data on the left hand side

external sort



Q5. Given a certain number (100000) of urls, how to find 95-th percentile of all url's length.

www.yahoo.com
www.sohu.com
www.google.com
...
100,000

Solution1:
	1. sort all urls according to their lengths
	2. and then return input[100000 * 0.95]
Time = O(nlogn)
Space = O(sum of size of all urls)

Solution2(better one?)
step1: iterate over all urls one by one, and for each urls X, we Bucket[X.length]++ O(n)
step2:
	for (i = 0; i < 4100; i++) {
		counter += Bucket[i];
		if (counter >= 100000 * 0.95) {
			return i;
		}
	}

 
































